{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initailStateRequest","isPending","robots","error","Card","name","email","id","className","src","alt","CardList","robotsArray","map","robot","i","key","SearchField","onSearch","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","console","log","this","setState","Component","App","onRequest","filterRobots","filter","toLowerCase","includes","connect","searchRobotsReducer","requestRobotsReducer","dispatch","event","payload","target","value","fetch","then","response","json","user","catch","err","requestRobots","rootReducers","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80d4e873.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_PENDING,\r\n  REQUEST_FAIL,\r\n  REQUEST_SUCCESS\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobotsReducer = (\r\n  state = initialStateSearch,\r\n  action = {}\r\n) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...action, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initailStateRequest = {\r\n  isPending: true,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobotsReducer = (\r\n  state = initailStateRequest,\r\n  action = {}\r\n) => {\r\n  switch (action.type) {\r\n    case REQUEST_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_SUCCESS:\r\n      return { ...state, isPending: false, robots: action.payload };\r\n    case REQUEST_FAIL:\r\n      return { ...state, isPending: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green br3 dib ma3 pa3 grow bw2 shadow-5\">\r\n      <img\r\n        src={`https://robohash.org/${id}?set=set2&size=150x170`}\r\n        alt=\"robocard\"\r\n      ></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const robotsArray = robots.map((robot, i) => {\r\n    return <Card key={i} name={robot.name} email={robot.email} id={robot.id} />;\r\n  });\r\n  return <div>{robotsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchField = ({ onSearch }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"bg-lightest-blue pa3 ba b--green shadow-5 ma3 \"\r\n        placeholder=\"Search\"\r\n        onChange={onSearch}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"3px solid black\",\r\n        height: \"400px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error, info);\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h2 className=\"f1 tc\"> Something went wrong</h2>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchField from \"../components/SearchField\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Errorboundary from \"../components/ErrorBoundary\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobotsReducer.searchField,\r\n    isPending: state.requestRobotsReducer.isPending,\r\n    robots: state.requestRobotsReducer.robots,\r\n    error: state.requestRobotsReducer.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequest: () => requestRobots(dispatch)\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequest();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearch, robots } = this.props;\r\n\r\n    const filterRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField);\r\n    });\r\n\r\n    return !robots ? (\r\n      <h1 className=\"f1 tc\">Loading...</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h2 className=\"f1\">Robo Friend</h2>\r\n        <SearchField onSearch={onSearch} />\r\n        <Scroll>\r\n          <Errorboundary>\r\n            <CardList robots={filterRobots} />\r\n          </Errorboundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_PENDING,\r\n  REQUEST_FAIL,\r\n  REQUEST_SUCCESS\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((user) => {\r\n      return dispatch({ type: REQUEST_SUCCESS, payload: user });\r\n    })\r\n    .catch((err) => {\r\n      return dispatch({ type: REQUEST_FAIL, payload: err });\r\n    });\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_PENDING = \"REQUEST_PENDING\";\r\nexport const REQUEST_SUCCESS = \"REQUEST_SUCCESS\";\r\nexport const REQUEST_FAIL = \"REQUEST_FAIL\";\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobotsReducer, requestRobotsReducer } from \"./reducers\";\nimport App from \"./containers/App\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst rootReducers = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n});\nconst logger = createLogger();\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}